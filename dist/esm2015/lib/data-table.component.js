import * as tslib_1 from "tslib";
import { ViewChild } from '@angular/core';
import { MatPaginator, MatTableDataSource } from '@angular/material';
import _ from 'underscore';
import moment from 'moment-timezone';
import { UtilitiesService } from './services/utilities.service';
export class DataTableComponent {
    /**
    * @constructor
    * @param {Injector} injector
    */
    constructor(injector) {
        this.injector = injector;
        this.filtering = true;
        this.sortKey = 'name';
        this.dataSourceClone = [];
        this.searchQueries = {};
        this.filters = {};
        this.dataSource = new MatTableDataSource([]);
        this.isExpansionDetailRow = (_i, row) => row.hasOwnProperty('detail_row');
    }
    set paginator(paginator) {
        this.dataSource.paginator = paginator;
    }
    /**
    * Toggle filter box
    * @return {void}
    */
    toggleFilter() {
        this.filtering = !this.filtering;
    }
    /**
    * Apply filter
    * @return {void}
    */
    applyFilter() {
        this.dataSource.filterPredicate = (data, filters) => {
            let flag = true;
            _.each(filters, (filter, key) => {
                if (!flag
                    || filter === null
                    || filter === undefined) {
                    return;
                }
                const value = _.get(data, key);
                // Range filter
                if (!isNaN(filter.min) && !isNaN(filter.max)) {
                    flag = value >= filter.min && value <= filter.max;
                    return;
                }
                // Date range filter
                if (filter.begin && filter.end) {
                    const date = moment(value).startOf('day');
                    flag = date.isSameOrAfter(moment(filter.begin).startOf('day'), 'day')
                        && date.isSameOrBefore(moment(filter.end).startOf('day'), 'day');
                    return;
                }
                // Date filter
                if (moment.isMoment(filter)) {
                    flag = moment(value).startOf('day')
                        .isSame(moment(filter).startOf('day'), 'day');
                    return;
                }
                flag = value === filter || _.contains(filter, value);
            });
            _.each(this.searchQueries, (query, key) => {
                if (!flag)
                    return;
                flag = UtilitiesService.stripVietnameseSymbol((_.get(data, key) || '')
                    .toLowerCase()
                    .replace(/ /g, ''))
                    .indexOf(UtilitiesService.stripVietnameseSymbol((query || '')
                    .toLowerCase()
                    .replace(/ /g, ''))) > -1;
            });
            return flag;
        };
        this.dataSource.filter = this.filters;
    }
    /**
    * Reset filter
    * @return {void}
    */
    resetFilter() {
        _.each(this.searchQueries, (_i, key) => this.searchQueries[key] = undefined);
        _.each(this.filters, (_i, key) => this.filters[key] = undefined);
        this.applyFilter();
    }
    /**
    * Sort data source
    * @param {string} key
    * @param {any} options
    * @return {array}
    */
    sortDataSource(key, options = {}) {
        const data = _.clone(this.dataSourceClone);
        if (!options.type) {
            data.sort((a, b) => {
                const x = _.get(a, key) ? _.get(a, key).toLowerCase() : '';
                const y = _.get(b, key) ? _.get(b, key).toLowerCase() : '';
                return x < y ? -1 : x > y ? 1 : 0;
            });
        }
        else {
            data.sort((a, b) => {
                const x = _.get(a, key);
                const y = _.get(b, key);
                return x < y ? 1 : x > y ? -1 : 0;
            });
        }
        return options.reverse ? data.reverse() : data;
    }
    /**
    * Apply sorter
    * @param {boolean} isReverse
    * @return {void}
    */
    applySorter(isReverse = false) {
        if (isReverse)
            this.isReverse = !this.isReverse;
        this.dataSource.data = this.sortDataSource(this.sortKey, { reverse: this.isReverse });
    }
}
tslib_1.__decorate([
    ViewChild('paginator'),
    tslib_1.__metadata("design:type", MatPaginator),
    tslib_1.__metadata("design:paramtypes", [MatPaginator])
], DataTableComponent.prototype, "paginator", null);
//# sourceMappingURL=data:application/json;base64,