import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    OrderByPipe_1 = OrderByPipe;
    /**
    * Order by comparator
    * @static
    * @param {any} a
    * @param {any} b
    * @return {number}
    */
    OrderByPipe._orderByComparator = function (a, b) {
        if (!a)
            return -1;
        if (!b)
            return 1;
        if ((isNaN(parseFloat(a)) || !isFinite(a))
            || (isNaN(parseFloat(b)) || !isFinite(b))) {
            // Isn't a number so lowercase the string to properly compare
            if (a.toLowerCase() < b.toLowerCase())
                return -1;
            if (a.toLowerCase() > b.toLowerCase())
                return 1;
        }
        else {
            // Parse strings as numbers to compare properly
            if (parseFloat(a) < parseFloat(b))
                return -1;
            if (parseFloat(a) > parseFloat(b))
                return 1;
        }
        return 0; // equal each other
    };
    /**
    * Get own nested property
    * @static
    * @param {any} obj
    * @param {string} propertyPath
    * @return {any}
    */
    OrderByPipe.getOwnNestedProperty = function (obj, propertyPath) {
        if (!propertyPath)
            return false;
        var properties = propertyPath.split('.');
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            if (!obj || !obj.hasOwnProperty(prop)) {
                return null;
            }
            obj = obj[prop];
        }
        return obj;
    };
    /**
    * Transform
    * @param {any} input
    * @return {any}
    */
    OrderByPipe.prototype.transform = function (input, _a) {
        var _b = tslib_1.__read(_a, 1), _c = _b[0], config = _c === void 0 ? '+' : _c;
        if (!Array.isArray(input))
            return input;
        if (!Array.isArray(config)
            || (Array.isArray(config) && config.length === 1)) {
            var propertyToCheck = !Array.isArray(config) ? config : config[0];
            var desc_1 = propertyToCheck.substr(0, 1) === '-';
            if (!propertyToCheck
                || propertyToCheck === '-' || propertyToCheck === '+') {
                return !desc_1 ? input.sort() : input.sort().reverse();
            }
            var property_1 = propertyToCheck.substr(0, 1) === '+'
                || propertyToCheck.substr(0, 1) === '-'
                ? propertyToCheck.substr(1)
                : propertyToCheck;
            return input.sort(function (a, b) {
                return !desc_1
                    ? OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property_1), OrderByPipe_1.getOwnNestedProperty(b, property_1))
                    : -OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property_1), OrderByPipe_1.getOwnNestedProperty(b, property_1));
            });
        }
        return input.sort(function (a, b) {
            for (var i = 0; i < config.length; i++) {
                var desc = config[i].substr(0, 1) === '-';
                var property = config[i].substr(0, 1) === '+'
                    || config[i].substr(0, 1) === '-'
                    ? config[i].substr(1)
                    : config[i];
                var comparison = !desc
                    ? OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property), OrderByPipe_1.getOwnNestedProperty(b, property))
                    : -OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property), OrderByPipe_1.getOwnNestedProperty(b, property));
                if (comparison !== 0)
                    return comparison;
            }
            return 0;
        });
    };
    var OrderByPipe_1;
    OrderByPipe = OrderByPipe_1 = tslib_1.__decorate([
        Pipe({
            name: 'orderBy',
            pure: false,
        })
    ], OrderByPipe);
    return OrderByPipe;
}());
export { OrderByPipe };
//# sourceMappingURL=data:application/json;base64,