import * as tslib_1 from "tslib";
var OrderByPipe_1;
import { Pipe } from '@angular/core';
let OrderByPipe = OrderByPipe_1 = class OrderByPipe {
    /**
    * Order by comparator
    * @static
    * @param {any} a
    * @param {any} b
    * @return {number}
    */
    static _orderByComparator(a, b) {
        if (!a)
            return -1;
        if (!b)
            return 1;
        if ((isNaN(parseFloat(a)) || !isFinite(a))
            || (isNaN(parseFloat(b)) || !isFinite(b))) {
            // Isn't a number so lowercase the string to properly compare
            if (a.toLowerCase() < b.toLowerCase())
                return -1;
            if (a.toLowerCase() > b.toLowerCase())
                return 1;
        }
        else {
            // Parse strings as numbers to compare properly
            if (parseFloat(a) < parseFloat(b))
                return -1;
            if (parseFloat(a) > parseFloat(b))
                return 1;
        }
        return 0; // equal each other
    }
    /**
    * Get own nested property
    * @static
    * @param {any} obj
    * @param {string} propertyPath
    * @return {any}
    */
    static getOwnNestedProperty(obj, propertyPath) {
        if (!propertyPath)
            return false;
        const properties = propertyPath.split('.');
        for (let i = 0; i < properties.length; i++) {
            const prop = properties[i];
            if (!obj || !obj.hasOwnProperty(prop)) {
                return null;
            }
            obj = obj[prop];
        }
        return obj;
    }
    /**
    * Transform
    * @param {any} input
    * @return {any}
    */
    transform(input, [config = '+']) {
        if (!Array.isArray(input))
            return input;
        if (!Array.isArray(config)
            || (Array.isArray(config) && config.length === 1)) {
            const propertyToCheck = !Array.isArray(config) ? config : config[0];
            const desc = propertyToCheck.substr(0, 1) === '-';
            if (!propertyToCheck
                || propertyToCheck === '-' || propertyToCheck === '+') {
                return !desc ? input.sort() : input.sort().reverse();
            }
            const property = propertyToCheck.substr(0, 1) === '+'
                || propertyToCheck.substr(0, 1) === '-'
                ? propertyToCheck.substr(1)
                : propertyToCheck;
            return input.sort((a, b) => {
                return !desc
                    ? OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property), OrderByPipe_1.getOwnNestedProperty(b, property))
                    : -OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property), OrderByPipe_1.getOwnNestedProperty(b, property));
            });
        }
        return input.sort((a, b) => {
            for (let i = 0; i < config.length; i++) {
                const desc = config[i].substr(0, 1) === '-';
                const property = config[i].substr(0, 1) === '+'
                    || config[i].substr(0, 1) === '-'
                    ? config[i].substr(1)
                    : config[i];
                const comparison = !desc
                    ? OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property), OrderByPipe_1.getOwnNestedProperty(b, property))
                    : -OrderByPipe_1._orderByComparator(OrderByPipe_1.getOwnNestedProperty(a, property), OrderByPipe_1.getOwnNestedProperty(b, property));
                if (comparison !== 0)
                    return comparison;
            }
            return 0;
        });
    }
};
OrderByPipe = OrderByPipe_1 = tslib_1.__decorate([
    Pipe({
        name: 'orderBy',
        pure: false,
    })
], OrderByPipe);
export { OrderByPipe };
//# sourceMappingURL=data:application/json;base64,