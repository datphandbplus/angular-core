import { LOCATION_INITIALIZED } from '@angular/common';
import moment from 'moment-timezone';
import { DEFAULT_TIMEZONE } from '../injection-token';
export function appInitializerFactory(translateService, localeService, injector) {
    return () => new Promise((resolve) => {
        const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null));
        const defaultTimezone = injector.get(DEFAULT_TIMEZONE);
        const locale = localeService.locale;
        locationInitialized.then(() => {
            // Set moment timezone
            moment.tz.setDefault(defaultTimezone);
            // Set moment language
            moment.locale(locale);
            // This language will be used as a fallback when a translation isn't found in the current language
            const langToSet = locale.substring(0, 2).toLowerCase();
            translateService.setDefaultLang(langToSet);
            translateService.use(langToSet).subscribe(
            /* tslint:disable-next-line */
            () => console.info(`Successfully initialized '${langToSet}' language.'`), 
            /* tslint:disable-next-line */
            () => console.error(`Problem with '${langToSet}' language initialization.'`), () => resolve(null));
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWluaXRpYWxpemVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWNvcmUvIiwic291cmNlcyI6WyJsaWIvbG9hZGVycy9hcHAtaW5pdGlhbGl6ZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV2RCxPQUFPLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd0RCxNQUFNLFVBQVUscUJBQXFCLENBQUUsZ0JBQWtDLEVBQUUsYUFBNEIsRUFBRSxRQUFrQjtJQUMxSCxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUUsT0FBWSxFQUFHLEVBQUU7UUFDakQsTUFBTSxtQkFBbUIsR0FBUSxRQUFRLENBQUMsR0FBRyxDQUFFLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLENBQUUsQ0FBQztRQUMvRixNQUFNLGVBQWUsR0FBVyxRQUFRLENBQUMsR0FBRyxDQUFFLGdCQUFnQixDQUFFLENBQUM7UUFDakUsTUFBTSxNQUFNLEdBQVcsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUU1QyxtQkFBbUIsQ0FBQyxJQUFJLENBQUUsR0FBRyxFQUFFO1lBQzlCLHNCQUFzQjtZQUN0QixNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBRSxlQUFlLENBQUUsQ0FBQztZQUV4QyxzQkFBc0I7WUFDdEIsTUFBTSxDQUFDLE1BQU0sQ0FBRSxNQUFNLENBQUUsQ0FBQztZQUV4QixrR0FBa0c7WUFDbEcsTUFBTSxTQUFTLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakUsZ0JBQWdCLENBQUMsY0FBYyxDQUFFLFNBQVMsQ0FBRSxDQUFDO1lBQzdDLGdCQUFnQixDQUFDLEdBQUcsQ0FBRSxTQUFTLENBQUUsQ0FBQyxTQUFTO1lBQzFDLDhCQUE4QjtZQUM5QixHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFFLDZCQUE2QixTQUFTLGNBQWMsQ0FBRTtZQUMxRSw4QkFBOEI7WUFDOUIsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBRSxpQkFBaUIsU0FBUyw2QkFBNkIsQ0FBRSxFQUM5RSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLENBQ3JCLENBQUM7UUFDSCxDQUFDLENBQUUsQ0FBQztJQUNMLENBQUMsQ0FBRSxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMT0NBVElPTl9JTklUSUFMSVpFRCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudC10aW1lem9uZSc7XG5cbmltcG9ydCB7IERFRkFVTFRfVElNRVpPTkUgfSBmcm9tICcuLi9pbmplY3Rpb24tdG9rZW4nO1xuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2xvY2FsZS5zZXJ2aWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcEluaXRpYWxpemVyRmFjdG9yeSggdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSwgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZSwgaW5qZWN0b3I6IEluamVjdG9yICkge1xuXHRyZXR1cm4gKCkgPT4gbmV3IFByb21pc2U8YW55PiggKCByZXNvbHZlOiBhbnkgKSA9PiB7XG5cdFx0Y29uc3QgbG9jYXRpb25Jbml0aWFsaXplZDogYW55ID0gaW5qZWN0b3IuZ2V0KCBMT0NBVElPTl9JTklUSUFMSVpFRCwgUHJvbWlzZS5yZXNvbHZlKCBudWxsICkgKTtcblx0XHRjb25zdCBkZWZhdWx0VGltZXpvbmU6IHN0cmluZyA9IGluamVjdG9yLmdldCggREVGQVVMVF9USU1FWk9ORSApO1xuXHRcdGNvbnN0IGxvY2FsZTogc3RyaW5nID0gbG9jYWxlU2VydmljZS5sb2NhbGU7XG5cblx0XHRsb2NhdGlvbkluaXRpYWxpemVkLnRoZW4oICgpID0+IHtcblx0XHRcdC8vIFNldCBtb21lbnQgdGltZXpvbmVcblx0XHRcdG1vbWVudC50ei5zZXREZWZhdWx0KCBkZWZhdWx0VGltZXpvbmUgKTtcblxuXHRcdFx0Ly8gU2V0IG1vbWVudCBsYW5ndWFnZVxuXHRcdFx0bW9tZW50LmxvY2FsZSggbG9jYWxlICk7XG5cblx0XHRcdC8vIFRoaXMgbGFuZ3VhZ2Ugd2lsbCBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgd2hlbiBhIHRyYW5zbGF0aW9uIGlzbid0IGZvdW5kIGluIHRoZSBjdXJyZW50IGxhbmd1YWdlXG5cdFx0XHRjb25zdCBsYW5nVG9TZXQ6IHN0cmluZyA9IGxvY2FsZS5zdWJzdHJpbmcoIDAsIDIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0dHJhbnNsYXRlU2VydmljZS5zZXREZWZhdWx0TGFuZyggbGFuZ1RvU2V0ICk7XG5cdFx0XHR0cmFuc2xhdGVTZXJ2aWNlLnVzZSggbGFuZ1RvU2V0ICkuc3Vic2NyaWJlKFxuXHRcdFx0XHQvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cblx0XHRcdFx0KCkgPT4gY29uc29sZS5pbmZvKCBgU3VjY2Vzc2Z1bGx5IGluaXRpYWxpemVkICcke2xhbmdUb1NldH0nIGxhbmd1YWdlLidgICksXG5cdFx0XHRcdC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSAqL1xuXHRcdFx0XHQoKSA9PiBjb25zb2xlLmVycm9yKCBgUHJvYmxlbSB3aXRoICcke2xhbmdUb1NldH0nIGxhbmd1YWdlIGluaXRpYWxpemF0aW9uLidgICksXG5cdFx0XHRcdCgpID0+IHJlc29sdmUoIG51bGwgKVxuXHRcdFx0KTtcblx0XHR9ICk7XG5cdH0gKTtcbn1cbiJdfQ==