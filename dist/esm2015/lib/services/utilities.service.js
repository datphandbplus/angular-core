import _ from 'underscore';
import { LATIN_MAP } from '../resources';
// @dynamic
export class UtilitiesService {
    /**
    * Strip vietnamese symbol
    * @static
    * @param {string} str - String to strip
    * @return {string} Striped string
    */
    static stripVietnameseSymbol(str) {
        return str.replace(/[^A-Za-z0-9]/g, (x) => {
            return LATIN_MAP[x] || x;
        });
    }
    /**
    * Get color
    * @static
    * @param {any} colors
    * @param {number} index
    * @return {string}
    */
    static getColor(colors, index) {
        const colorArr = _.map(colors, (color) => color);
        return index < 9
            ? colorArr[index]
            : 'rgb('
                + [
                    _.random(0, 255),
                    _.random(0, 255),
                    _.random(0, 255),
                ].join(',')
                + ')';
    }
    /**
    * Convert hex to rgba
    * @static
    * @param {string} hex
    * @param {number} opacity
    * @return {any}
    */
    static hexToRgba(hex, opacity = 1) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
            ? 'rgba('
                + [
                    parseInt(result[1], 16),
                    parseInt(result[2], 16),
                    parseInt(result[3], 16),
                    opacity,
                ].join(',')
                + ')'
            : null;
    }
    /**
    * Cpnvert mutli depth
    * @param {Array} items
    * @param {string} fieldKey
    * @param {string} fieldParentKey
    * @param {string} fieldName
    * @return {Array}
    */
    static convertMultiDepth(items, fieldKey = 'id', fieldParentKey = 'parent_id', fieldName = 'name') {
        const hashArr = {};
        _.each(_.sortBy(items, fieldName), (item) => {
            const parentIndex = item[fieldParentKey] || 0;
            if (!hashArr[parentIndex]) {
                hashArr[parentIndex] = [];
            }
            let parent = _.find(items, (_item) => {
                return _item[fieldKey] === parentIndex;
            });
            if (!parent) {
                hashArr[parentIndex].push(item);
                return;
            }
            let prefix = '--';
            while (parent && parent[fieldParentKey]) {
                parent = _.find(items, (_item) => {
                    return _item[fieldKey] === parent[fieldParentKey];
                });
                prefix += '--';
            }
            item.__name = [prefix, item[fieldName]].join(' ');
            hashArr[parentIndex].push(item);
        });
        return UtilitiesService.hierarhySort(hashArr, fieldKey, fieldName, hashArr ? _.keys(hashArr)[0] : 0);
    }
    /**
    * Hierarhy sort
    * @param {any} hashArr
    * @param {string} fieldKey
    * @param {string} fieldName
    * @param {number} key
    * @param {Array} result
    * @return {Array}
    */
    static hierarhySort(hashArr, fieldKey = 'id', fieldName = 'name', key = 0, result = []) {
        if (!hashArr[key])
            return;
        const arr = hashArr[key].sort((a, b) => a[fieldName] > b[fieldName]);
        for (let i = 0; i < arr.length; i++) {
            result.push(arr[i]);
            UtilitiesService.hierarhySort(hashArr, fieldKey, fieldName, arr[i][fieldKey], result);
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,