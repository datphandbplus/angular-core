import { LOCATION_INITIALIZED } from '@angular/common';
import moment from 'moment-timezone';
import { DEFAULT_TIMEZONE } from '../injection-token';
export function appInitializerFactory(translateService, localeService, injector) {
    return function () { return new Promise(function (resolve) {
        var locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null));
        var defaultTimezone = injector.get(DEFAULT_TIMEZONE);
        var locale = localeService.locale;
        locationInitialized.then(function () {
            // Set moment timezone
            moment.tz.setDefault(defaultTimezone);
            // Set moment language
            moment.locale(locale);
            // This language will be used as a fallback when a translation isn't found in the current language
            var langToSet = locale.substring(0, 2).toLowerCase();
            translateService.setDefaultLang(langToSet);
            translateService.use(langToSet).subscribe(
            /* tslint:disable-next-line */
            function () { return console.info("Successfully initialized '" + langToSet + "' language.'"); }, 
            /* tslint:disable-next-line */
            function () { return console.error("Problem with '" + langToSet + "' language initialization.'"); }, function () { return resolve(null); });
        });
    }); };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWluaXRpYWxpemVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWNvcmUvIiwic291cmNlcyI6WyJsaWIvbG9hZGVycy9hcHAtaW5pdGlhbGl6ZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV2RCxPQUFPLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd0RCxNQUFNLFVBQVUscUJBQXFCLENBQUUsZ0JBQWtDLEVBQUUsYUFBNEIsRUFBRSxRQUFrQjtJQUMxSCxPQUFPLGNBQU0sT0FBQSxJQUFJLE9BQU8sQ0FBTyxVQUFFLE9BQVk7UUFDNUMsSUFBTSxtQkFBbUIsR0FBUSxRQUFRLENBQUMsR0FBRyxDQUFFLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLENBQUUsQ0FBQztRQUMvRixJQUFNLGVBQWUsR0FBVyxRQUFRLENBQUMsR0FBRyxDQUFFLGdCQUFnQixDQUFFLENBQUM7UUFDakUsSUFBTSxNQUFNLEdBQVcsYUFBYSxDQUFDLE1BQU0sQ0FBQztRQUU1QyxtQkFBbUIsQ0FBQyxJQUFJLENBQUU7WUFDekIsc0JBQXNCO1lBQ3RCLE1BQU0sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFFLGVBQWUsQ0FBRSxDQUFDO1lBRXhDLHNCQUFzQjtZQUN0QixNQUFNLENBQUMsTUFBTSxDQUFFLE1BQU0sQ0FBRSxDQUFDO1lBRXhCLGtHQUFrRztZQUNsRyxJQUFNLFNBQVMsR0FBVyxNQUFNLENBQUMsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqRSxnQkFBZ0IsQ0FBQyxjQUFjLENBQUUsU0FBUyxDQUFFLENBQUM7WUFDN0MsZ0JBQWdCLENBQUMsR0FBRyxDQUFFLFNBQVMsQ0FBRSxDQUFDLFNBQVM7WUFDMUMsOEJBQThCO1lBQzlCLGNBQU0sT0FBQSxPQUFPLENBQUMsSUFBSSxDQUFFLCtCQUE2QixTQUFTLGlCQUFjLENBQUUsRUFBcEUsQ0FBb0U7WUFDMUUsOEJBQThCO1lBQzlCLGNBQU0sT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFFLG1CQUFpQixTQUFTLGdDQUE2QixDQUFFLEVBQXhFLENBQXdFLEVBQzlFLGNBQU0sT0FBQSxPQUFPLENBQUUsSUFBSSxDQUFFLEVBQWYsQ0FBZSxDQUNyQixDQUFDO1FBQ0gsQ0FBQyxDQUFFLENBQUM7SUFDTCxDQUFDLENBQUUsRUF2QlUsQ0F1QlYsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTE9DQVRJT05fSU5JVElBTElaRUQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQtdGltZXpvbmUnO1xuXG5pbXBvcnQgeyBERUZBVUxUX1RJTUVaT05FIH0gZnJvbSAnLi4vaW5qZWN0aW9uLXRva2VuJztcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9sb2NhbGUuc2VydmljZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBJbml0aWFsaXplckZhY3RvcnkoIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UsIGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2UsIGluamVjdG9yOiBJbmplY3RvciApIHtcblx0cmV0dXJuICgpID0+IG5ldyBQcm9taXNlPGFueT4oICggcmVzb2x2ZTogYW55ICkgPT4ge1xuXHRcdGNvbnN0IGxvY2F0aW9uSW5pdGlhbGl6ZWQ6IGFueSA9IGluamVjdG9yLmdldCggTE9DQVRJT05fSU5JVElBTElaRUQsIFByb21pc2UucmVzb2x2ZSggbnVsbCApICk7XG5cdFx0Y29uc3QgZGVmYXVsdFRpbWV6b25lOiBzdHJpbmcgPSBpbmplY3Rvci5nZXQoIERFRkFVTFRfVElNRVpPTkUgKTtcblx0XHRjb25zdCBsb2NhbGU6IHN0cmluZyA9IGxvY2FsZVNlcnZpY2UubG9jYWxlO1xuXG5cdFx0bG9jYXRpb25Jbml0aWFsaXplZC50aGVuKCAoKSA9PiB7XG5cdFx0XHQvLyBTZXQgbW9tZW50IHRpbWV6b25lXG5cdFx0XHRtb21lbnQudHouc2V0RGVmYXVsdCggZGVmYXVsdFRpbWV6b25lICk7XG5cblx0XHRcdC8vIFNldCBtb21lbnQgbGFuZ3VhZ2Vcblx0XHRcdG1vbWVudC5sb2NhbGUoIGxvY2FsZSApO1xuXG5cdFx0XHQvLyBUaGlzIGxhbmd1YWdlIHdpbGwgYmUgdXNlZCBhcyBhIGZhbGxiYWNrIHdoZW4gYSB0cmFuc2xhdGlvbiBpc24ndCBmb3VuZCBpbiB0aGUgY3VycmVudCBsYW5ndWFnZVxuXHRcdFx0Y29uc3QgbGFuZ1RvU2V0OiBzdHJpbmcgPSBsb2NhbGUuc3Vic3RyaW5nKCAwLCAyICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHRyYW5zbGF0ZVNlcnZpY2Uuc2V0RGVmYXVsdExhbmcoIGxhbmdUb1NldCApO1xuXHRcdFx0dHJhbnNsYXRlU2VydmljZS51c2UoIGxhbmdUb1NldCApLnN1YnNjcmliZShcblx0XHRcdFx0LyogdHNsaW50OmRpc2FibGUtbmV4dC1saW5lICovXG5cdFx0XHRcdCgpID0+IGNvbnNvbGUuaW5mbyggYFN1Y2Nlc3NmdWxseSBpbml0aWFsaXplZCAnJHtsYW5nVG9TZXR9JyBsYW5ndWFnZS4nYCApLFxuXHRcdFx0XHQvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cblx0XHRcdFx0KCkgPT4gY29uc29sZS5lcnJvciggYFByb2JsZW0gd2l0aCAnJHtsYW5nVG9TZXR9JyBsYW5ndWFnZSBpbml0aWFsaXphdGlvbi4nYCApLFxuXHRcdFx0XHQoKSA9PiByZXNvbHZlKCBudWxsIClcblx0XHRcdCk7XG5cdFx0fSApO1xuXHR9ICk7XG59XG4iXX0=